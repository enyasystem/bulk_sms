"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/news-scraper.ts":
/*!*****************************!*\
  !*** ./lib/news-scraper.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MOCK_NEWS: () => (/* binding */ MOCK_NEWS),\n/* harmony export */   categorizeNews: () => (/* binding */ categorizeNews),\n/* harmony export */   fetchAllNews: () => (/* binding */ fetchAllNews),\n/* harmony export */   fetchRssFeed: () => (/* binding */ fetchRssFeed),\n/* harmony export */   normalizeNewsData: () => (/* binding */ normalizeNewsData),\n/* harmony export */   processAllNews: () => (/* binding */ processAllNews),\n/* harmony export */   removeDuplicates: () => (/* binding */ removeDuplicates),\n/* harmony export */   scrapeNews: () => (/* binding */ scrapeNews)\n/* harmony export */ });\n/* harmony import */ var rss_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! rss-parser */ \"(app-pages-browser)/./node_modules/rss-parser/index.js\");\n/* harmony import */ var rss_parser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(rss_parser__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! uuid */ \"(app-pages-browser)/./node_modules/uuid/dist/esm-browser/v4.js\");\n/* harmony import */ var cheerio__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cheerio */ \"(app-pages-browser)/./node_modules/cheerio/dist/browser/index.js\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\n\n\n\n// Initialize RSS parser with custom fields\nconst parser = new (rss_parser__WEBPACK_IMPORTED_MODULE_0___default())({\n    customFields: {\n        item: [\n            [\n                \"media:content\",\n                \"media\",\n                {\n                    keepArray: true\n                }\n            ],\n            [\n                \"media:thumbnail\",\n                \"thumbnail\",\n                {\n                    keepArray: true\n                }\n            ],\n            [\n                \"enclosure\",\n                \"enclosure\"\n            ]\n        ]\n    }\n});\n// Map of news sources\nconst NEWS_SOURCES = {\n    guardian: {\n        name: \"The Guardian Nigeria\",\n        url: \"https://guardian.ng/feed/\",\n        type: \"rss\"\n    },\n    punch: {\n        name: \"Punch\",\n        url: \"https://punchng.com/feed/\",\n        type: \"rss\"\n    },\n    vanguard: {\n        name: \"Vanguard\",\n        url: \"https://www.vanguardngr.com/feed/\",\n        type: \"rss\"\n    },\n    premiumTimes: {\n        name: \"Premium Times\",\n        url: \"https://www.premiumtimesng.com/feed\",\n        type: \"rss\"\n    },\n    channelsTV: {\n        name: \"Channels TV\",\n        url: \"https://www.channelstv.com/feed/\",\n        type: \"rss\"\n    },\n    cnn: {\n        name: \"CNN Africa\",\n        url: \"http://rss.cnn.com/rss/edition_africa.rss\",\n        type: \"rss\"\n    },\n    bbcPidgin: {\n        name: \"BBC Pidgin\",\n        url: \"https://feeds.bbci.co.uk/pidgin/rss.xml\",\n        type: \"rss\"\n    },\n    thisDay: {\n        name: \"ThisDay\",\n        url: \"https://www.thisdaylive.com/index.php/feed/\",\n        type: \"rss\"\n    },\n    dailyTrust: {\n        name: \"Daily Trust\",\n        url: \"https://dailytrust.com/feed/\",\n        type: \"rss\"\n    }\n};\n// Function to extract image from RSS feed item\nfunction extractImageFromItem(item) {\n    var _item_enclosure_type;\n    // Try to get image from media:content\n    if (item.media && item.media.length > 0) {\n        for (const media of item.media){\n            var _media_$_type;\n            if (media.$ && media.$.url && (media.$.medium === \"image\" || ((_media_$_type = media.$.type) === null || _media_$_type === void 0 ? void 0 : _media_$_type.startsWith(\"image/\")))) {\n                return media.$.url;\n            }\n        }\n    }\n    // Try to get image from media:thumbnail\n    if (item.thumbnail && item.thumbnail.length > 0) {\n        for (const thumbnail of item.thumbnail){\n            if (thumbnail.$ && thumbnail.$.url) {\n                return thumbnail.$.url;\n            }\n        }\n    }\n    // Try to get image from enclosure\n    if (item.enclosure && item.enclosure.url && ((_item_enclosure_type = item.enclosure.type) === null || _item_enclosure_type === void 0 ? void 0 : _item_enclosure_type.startsWith(\"image/\"))) {\n        return item.enclosure.url;\n    }\n    // Try to extract image from content if it contains HTML\n    if (item.content && item.content.includes(\"<img\")) {\n        try {\n            const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(item.content);\n            const imgSrc = $(\"img\").first().attr(\"src\");\n            if (imgSrc) return imgSrc;\n        } catch (error) {\n            console.error(\"Error extracting image from content:\", error);\n        }\n    }\n    // Default placeholder\n    return \"/placeholder.svg?height=400&width=600\";\n}\n// Function to determine category from item\nfunction determineCategoryFromItem(item) {\n    const title = (item.title || \"\").toLowerCase();\n    const categories = item.categories || [];\n    const content = (item.content || \"\").toLowerCase();\n    // Check if categories array contains any of our predefined categories\n    const categoryMap = {\n        politics: [\n            \"politics\",\n            \"government\",\n            \"election\",\n            \"president\",\n            \"minister\",\n            \"senate\",\n            \"parliament\"\n        ],\n        entertainment: [\n            \"entertainment\",\n            \"music\",\n            \"movie\",\n            \"celebrity\",\n            \"film\",\n            \"actor\",\n            \"actress\",\n            \"nollywood\"\n        ],\n        sports: [\n            \"sports\",\n            \"football\",\n            \"soccer\",\n            \"basketball\",\n            \"tennis\",\n            \"athlete\",\n            \"tournament\",\n            \"championship\",\n            \"super eagles\"\n        ],\n        tech: [\n            \"tech\",\n            \"technology\",\n            \"digital\",\n            \"software\",\n            \"hardware\",\n            \"internet\",\n            \"app\",\n            \"computer\",\n            \"smartphone\"\n        ],\n        business: [\n            \"business\",\n            \"economy\",\n            \"finance\",\n            \"market\",\n            \"stock\",\n            \"trade\",\n            \"investment\",\n            \"banking\",\n            \"naira\"\n        ]\n    };\n    // Check categories first\n    for (const category of categories){\n        const lowerCategory = category.toLowerCase();\n        for (const [key, keywords] of Object.entries(categoryMap)){\n            if (keywords.some((keyword)=>lowerCategory.includes(keyword))) {\n                return key;\n            }\n        }\n    }\n    // Then check title\n    for (const [key, keywords] of Object.entries(categoryMap)){\n        if (keywords.some((keyword)=>title.includes(keyword))) {\n            return key;\n        }\n    }\n    // Finally check content\n    for (const [key, keywords] of Object.entries(categoryMap)){\n        if (keywords.some((keyword)=>content.includes(keyword))) {\n            return key;\n        }\n    }\n    // Default category\n    return \"general\";\n}\n// Update the fetchRssWithFetch function to better handle errors and support timeout using AbortController\nasync function fetchRssWithFetch(url) {\n    const controller = new AbortController();\n    const timeout = setTimeout(()=>controller.abort(), 10000); // 10 seconds\n    try {\n        const response = await fetch(url, {\n            signal: controller.signal,\n            headers: {\n                \"User-Agent\": \"Mozilla/5.0 (compatible; NaijaNewsBot/1.0)\"\n            }\n        });\n        clearTimeout(timeout);\n        if (!response.ok) {\n            console.warn(\"Failed to fetch RSS feed: \".concat(response.status, \" \").concat(response.statusText, \" for \").concat(url));\n            return null;\n        }\n        const text = await response.text();\n        return await parser.parseString(text);\n    } catch (error) {\n        clearTimeout(timeout);\n        if (error.name === \"AbortError\") {\n            console.error(\"Fetch for \".concat(url, \" timed out.\"));\n        } else {\n            console.error(\"Error fetching RSS feed from \".concat(url, \":\"), error);\n        }\n        return null;\n    }\n}\n// Update the fetchRssFeed function to handle null responses from fetchRssWithFetch\nasync function fetchRssFeed(source) {\n    try {\n        console.log(\"Fetching RSS feed from \".concat(NEWS_SOURCES[source].name, \" (\").concat(NEWS_SOURCES[source].url, \")\"));\n        // In the preview environment, we can't make HTTP requests\n        // Return mock data filtered by source\n        if (process.env.NEXT_PUBLIC_VERCEL_ENV === \"preview\") {\n            console.log(\"Using mock data for preview environment\");\n            return MOCK_NEWS.filter((item)=>item.sourceName.includes(NEWS_SOURCES[source].name.split(\" \")[0]));\n        }\n        // Use fetch API instead of https.get\n        const feed = await fetchRssWithFetch(NEWS_SOURCES[source].url);\n        // If feed is null (fetch failed), return mock data for this source\n        if (!feed) {\n            console.warn(\"Failed to fetch RSS feed from \".concat(source, \", using mock data instead\"));\n            return MOCK_NEWS.filter((item)=>item.sourceName.includes(NEWS_SOURCES[source].name.split(\" \")[0]));\n        }\n        if (!feed.items || feed.items.length === 0) {\n            console.warn(\"No items found in RSS feed from \".concat(source));\n            return [];\n        }\n        return feed.items.map((item)=>{\n            const imageUrl = extractImageFromItem(item);\n            const category = determineCategoryFromItem(item);\n            return {\n                id: item.guid || (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),\n                title: item.title || \"No Title\",\n                summary: item.contentSnippet || item.summary || \"No summary available\",\n                imageUrl,\n                sourceUrl: item.link || \"\",\n                sourceName: NEWS_SOURCES[source].name,\n                category,\n                publishedAt: item.pubDate ? new Date(item.pubDate).toISOString() : new Date().toISOString()\n            };\n        });\n    } catch (error) {\n        console.error(\"Error fetching RSS feed from \".concat(source, \":\"), error);\n        // Return mock data as fallback\n        return MOCK_NEWS.filter((item)=>item.sourceName.includes(NEWS_SOURCES[source].name.split(\" \")[0]));\n    }\n}\n// Function to scrape news from website using cheerio\nasync function scrapeNews(source) {\n    try {\n        console.log(\"Scraping news from \".concat(NEWS_SOURCES[source].name, \" (\").concat(NEWS_SOURCES[source].url, \")\"));\n        // In the preview environment, we can't make HTTP requests\n        // Return mock data filtered by source\n        if (process.env.NEXT_PUBLIC_VERCEL_ENV === \"preview\") {\n            console.log(\"Using mock data for preview environment\");\n            return MOCK_NEWS.filter((item)=>item.sourceName.includes(NEWS_SOURCES[source].name.split(\" \")[0]));\n        }\n        const response = await fetch(NEWS_SOURCES[source].url);\n        const html = await response.text();\n        const $ = cheerio__WEBPACK_IMPORTED_MODULE_1__.load(html);\n        const newsItems = [];\n        // Different scraping logic for different sources\n        if (source === \"guardian\") {\n            $(\"article\").each((i, el)=>{\n                const title = $(el).find(\"h3\").text().trim();\n                const link = $(el).find(\"a\").attr(\"href\");\n                const summary = $(el).find(\"p\").text().trim();\n                const imageUrl = $(el).find(\"img\").attr(\"src\") || \"/placeholder.svg?height=400&width=600\";\n                if (title && link) {\n                    newsItems.push({\n                        id: (0,uuid__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(),\n                        title,\n                        summary: summary || \"No summary available\",\n                        imageUrl,\n                        sourceUrl: link.startsWith(\"http\") ? link : \"https://guardian.ng\".concat(link),\n                        sourceName: NEWS_SOURCES[source].name,\n                        category: \"general\",\n                        publishedAt: new Date().toISOString()\n                    });\n                }\n            });\n        }\n        // Add more scraping logic for other sources as needed\n        return newsItems;\n    } catch (error) {\n        console.error(\"Error scraping news from \".concat(source, \":\"), error);\n        return MOCK_NEWS.filter((item)=>item.sourceName.includes(NEWS_SOURCES[source].name.split(\" \")[0]));\n    }\n}\n// Update the fetchAllNews function to handle individual source failures better\nasync function fetchAllNews() {\n    try {\n        // Check if we're in preview mode\n        if (process.env.NEXT_PUBLIC_VERCEL_ENV === \"preview\") {\n            console.log(\"Using mock data for preview environment\");\n            return MOCK_NEWS;\n        }\n        const allNews = [];\n        // Fetch from all sources\n        const sources = Object.keys(NEWS_SOURCES);\n        // Use Promise.allSettled instead of Promise.all to handle individual failures\n        const results = await Promise.allSettled(sources.map(async (source)=>{\n            try {\n                const sourceInfo = NEWS_SOURCES[source];\n                if (sourceInfo.type === \"rss\") {\n                    return await fetchRssFeed(source);\n                } else {\n                    return await scrapeNews(source);\n                }\n            } catch (error) {\n                console.error(\"Error fetching from \".concat(source, \":\"), error);\n                return [];\n            }\n        }));\n        // Combine all successful results\n        results.forEach((result, index)=>{\n            if (result.status === \"fulfilled\") {\n                allNews.push(...result.value);\n            } else {\n                console.error(\"Failed to fetch from \".concat(sources[index], \":\"), result.reason);\n                // Add mock data for failed sources\n                allNews.push(...MOCK_NEWS.filter((item)=>item.sourceName.includes(NEWS_SOURCES[sources[index]].name.split(\" \")[0])));\n            }\n        });\n        return allNews;\n    } catch (error) {\n        console.error(\"Error fetching all news:\", error);\n        // Return all mock data as fallback\n        return MOCK_NEWS;\n    }\n}\n// Function to normalize news data\nasync function normalizeNewsData(rawNews) {\n    // List of Nigerian sources only\n    const nigerianSources = [\n        \"The Guardian Nigeria\",\n        \"Punch\",\n        \"Vanguard\",\n        \"Premium Times\",\n        \"Channels TV\",\n        \"ThisDay\",\n        \"Daily Trust\"\n    ];\n    // Clean, normalize, and filter the data\n    return rawNews.filter((item)=>nigerianSources.includes(item.sourceName) && item.summary && item.summary.trim() !== \"\" && item.summary.trim().toLowerCase() !== \"no summary available\" && item.imageUrl && item.imageUrl.trim() !== \"\").map((item)=>({\n            ...item,\n            title: item.title.trim(),\n            summary: item.summary.trim().replace(/<[^>]*>?/gm, \"\").substring(0, 200) + (item.summary.length > 200 ? \"...\" : \"\"),\n            imageUrl: item.imageUrl\n        }));\n}\n// Function to categorize news\nasync function categorizeNews(news) {\n    const categorized = {\n        politics: [],\n        entertainment: [],\n        sports: [],\n        tech: [],\n        business: [],\n        general: []\n    };\n    news.forEach((item)=>{\n        if (categorized[item.category]) {\n            categorized[item.category].push(item);\n        } else {\n            categorized.general.push(item);\n        }\n    });\n    return categorized;\n}\n// Function to remove duplicates\nasync function removeDuplicates(news) {\n    const uniqueUrls = new Set();\n    const uniqueNews = [];\n    news.forEach((item)=>{\n        if (!uniqueUrls.has(item.sourceUrl)) {\n            uniqueUrls.add(item.sourceUrl);\n            uniqueNews.push(item);\n        }\n    });\n    return uniqueNews;\n}\n// Function to process all news\nasync function processAllNews() {\n    try {\n        // Fetch all news\n        const allNews = await fetchAllNews();\n        // Remove duplicates\n        const uniqueNews = await removeDuplicates(allNews);\n        // Normalize data\n        const normalizedNews = await normalizeNewsData(uniqueNews);\n        // Categorize news\n        const categorizedNews = await categorizeNews(normalizedNews);\n        return categorizedNews;\n    } catch (error) {\n        console.error(\"Error processing all news:\", error);\n        // Return categorized mock data\n        const categorized = await categorizeNews(MOCK_NEWS);\n        return categorized;\n    }\n}\n// Mock data for when RSS fetching isn't available (for development/preview)\nconst MOCK_NEWS = [\n    {\n        id: \"1\",\n        title: \"Nigeria Announces New Economic Reforms to Boost Growth\",\n        summary: \"The Nigerian government has unveiled a comprehensive economic reform package aimed at stimulating growth and attracting foreign investment.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://guardian.ng/news/nigeria-announces-new-economic-reforms\",\n        sourceName: \"The Guardian\",\n        category: \"politics\",\n        publishedAt: new Date(Date.now() - 3600000).toISOString()\n    },\n    {\n        id: \"2\",\n        title: \"Super Eagles Qualify for African Cup of Nations\",\n        summary: \"Nigeria's national football team, the Super Eagles, have qualified for the upcoming African Cup of Nations after a decisive victory.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://punchng.com/sports/super-eagles-qualify-for-afcon\",\n        sourceName: \"Punch\",\n        category: \"sports\",\n        publishedAt: new Date(Date.now() - 7200000).toISOString()\n    },\n    {\n        id: \"3\",\n        title: \"Nollywood Film Wins International Award at Cannes\",\n        summary: \"A Nigerian film has won a prestigious award at the Cannes Film Festival, marking a significant achievement for Nollywood.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://vanguardngr.com/entertainment/nollywood-film-wins-at-cannes\",\n        sourceName: \"Vanguard\",\n        category: \"entertainment\",\n        publishedAt: new Date(Date.now() - 10800000).toISOString()\n    },\n    {\n        id: \"4\",\n        title: \"Nigerian Tech Startup Raises $10 Million in Funding\",\n        summary: \"A Lagos-based technology startup has secured $10 million in Series A funding to expand its operations across Africa.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://premiumtimesng.com/business/nigerian-tech-startup-raises-10-million\",\n        sourceName: \"Premium Times\",\n        category: \"tech\",\n        publishedAt: new Date(Date.now() - 14400000).toISOString()\n    },\n    {\n        id: \"5\",\n        title: \"Central Bank of Nigeria Announces New Monetary Policy\",\n        summary: \"The CBN has announced changes to its monetary policy in an effort to stabilize the naira and control inflation.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://guardian.ng/business/cbn-announces-new-monetary-policy\",\n        sourceName: \"The Guardian\",\n        category: \"business\",\n        publishedAt: new Date(Date.now() - 18000000).toISOString()\n    },\n    {\n        id: \"6\",\n        title: \"President Addresses Nation on Security Challenges\",\n        summary: \"The Nigerian President has addressed the nation regarding ongoing security challenges and outlined new strategies to combat insecurity.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://punchng.com/politics/president-addresses-nation-on-security\",\n        sourceName: \"Punch\",\n        category: \"politics\",\n        publishedAt: new Date(Date.now() - 21600000).toISOString()\n    },\n    {\n        id: \"7\",\n        title: \"Nigerian Athlete Breaks Olympic Record\",\n        summary: \"A Nigerian athlete has broken an Olympic record in athletics, bringing pride to the nation and inspiring young sports enthusiasts.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://vanguardngr.com/sports/nigerian-athlete-breaks-olympic-record\",\n        sourceName: \"Vanguard\",\n        category: \"sports\",\n        publishedAt: new Date(Date.now() - 25200000).toISOString()\n    },\n    {\n        id: \"8\",\n        title: \"Popular Nigerian Musician Releases New Album\",\n        summary: \"A chart-topping Nigerian musician has released a highly anticipated new album that is already breaking streaming records.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://premiumtimesng.com/entertainment/musician-releases-new-album\",\n        sourceName: \"Premium Times\",\n        category: \"entertainment\",\n        publishedAt: new Date(Date.now() - 28800000).toISOString()\n    },\n    {\n        id: \"9\",\n        title: \"Nigeria Launches New Satellite for Communications\",\n        summary: \"Nigeria has successfully launched a new satellite that will enhance telecommunications and internet connectivity across the country.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://guardian.ng/tech/nigeria-launches-new-satellite\",\n        sourceName: \"The Guardian\",\n        category: \"tech\",\n        publishedAt: new Date(Date.now() - 32400000).toISOString()\n    },\n    {\n        id: \"10\",\n        title: \"Stock Market Reaches New Heights as Investor Confidence Grows\",\n        summary: \"The Nigerian Stock Exchange has reached a new all-time high as investor confidence in the economy continues to grow.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://punchng.com/business/stock-market-reaches-new-heights\",\n        sourceName: \"Punch\",\n        category: \"business\",\n        publishedAt: new Date(Date.now() - 36000000).toISOString()\n    },\n    {\n        id: \"11\",\n        title: \"Government Announces New Infrastructure Projects\",\n        summary: \"The Nigerian government has announced several new infrastructure projects aimed at improving transportation and power supply.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://vanguardngr.com/politics/government-announces-infrastructure-projects\",\n        sourceName: \"Vanguard\",\n        category: \"politics\",\n        publishedAt: new Date(Date.now() - 39600000).toISOString()\n    },\n    {\n        id: \"12\",\n        title: \"Nigerian Football Club Advances to Continental Championship\",\n        summary: \"A Nigerian football club has advanced to the finals of a continental championship, bringing pride to Nigerian sports fans.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://premiumtimesng.com/sports/football-club-advances-to-championship\",\n        sourceName: \"Premium Times\",\n        category: \"sports\",\n        publishedAt: new Date(Date.now() - 43200000).toISOString()\n    },\n    {\n        id: \"13\",\n        title: \"Nollywood Announces International Collaboration with Hollywood\",\n        summary: \"The Nigerian film industry has announced a major collaboration with Hollywood studios to produce international-standard films.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://guardian.ng/entertainment/nollywood-announces-hollywood-collaboration\",\n        sourceName: \"The Guardian\",\n        category: \"entertainment\",\n        publishedAt: new Date(Date.now() - 46800000).toISOString()\n    },\n    {\n        id: \"14\",\n        title: \"Nigerian Tech Innovators Showcase Solutions at Global Conference\",\n        summary: \"Nigerian technology innovators have showcased their solutions at a global technology conference, attracting international attention.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://punchng.com/tech/nigerian-innovators-at-global-conference\",\n        sourceName: \"Punch\",\n        category: \"tech\",\n        publishedAt: new Date(Date.now() - 50400000).toISOString()\n    },\n    {\n        id: \"15\",\n        title: \"Nigerian Banks Report Strong Quarterly Earnings\",\n        summary: \"Major Nigerian banks have reported strong quarterly earnings, indicating resilience in the financial sector despite economic challenges.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://vanguardngr.com/business/banks-report-strong-earnings\",\n        sourceName: \"Vanguard\",\n        category: \"business\",\n        publishedAt: new Date(Date.now() - 54000000).toISOString()\n    },\n    // CNN Africa mock news\n    {\n        id: \"16\",\n        title: \"African Leaders Meet to Discuss Continental Free Trade Agreement\",\n        summary: \"Leaders from across Africa have gathered to discuss the implementation of the African Continental Free Trade Agreement (AfCFTA).\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://edition.cnn.com/africa/african-leaders-meet-to-discuss-free-trade\",\n        sourceName: \"CNN Africa\",\n        category: \"politics\",\n        publishedAt: new Date(Date.now() - 5400000).toISOString()\n    },\n    {\n        id: \"17\",\n        title: \"New Study Shows Rapid Growth in African Tech Ecosystem\",\n        summary: \"A new study by CNN Africa reveals the rapid growth of technology startups across the continent, with Nigeria leading the way.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://edition.cnn.com/africa/rapid-growth-in-african-tech-ecosystem\",\n        sourceName: \"CNN Africa\",\n        category: \"tech\",\n        publishedAt: new Date(Date.now() - 9000000).toISOString()\n    },\n    // BBC Pidgin mock news\n    {\n        id: \"18\",\n        title: \"How Nigeria New Minimum Wage Go Affect Workers\",\n        summary: \"BBC Pidgin don look how di new minimum wage wey Nigeria government approve go affect workers for di kontri.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://www.bbc.com/pidgin/articles/nigeria-new-minimum-wage\",\n        sourceName: \"BBC Pidgin\",\n        category: \"business\",\n        publishedAt: new Date(Date.now() - 7200000).toISOString()\n    },\n    {\n        id: \"19\",\n        title: \"Afrobeats Stars Wey Dey Dominate Global Music Charts\",\n        summary: \"See di Nigerian Afrobeats stars wey dey make waves for international music charts with dia latest songs.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://www.bbc.com/pidgin/articles/afrobeats-stars-global-charts\",\n        sourceName: \"BBC Pidgin\",\n        category: \"entertainment\",\n        publishedAt: new Date(Date.now() - 10800000).toISOString()\n    },\n    // ThisDay mock news\n    {\n        id: \"20\",\n        title: \"Nigeria's Oil Production Increases by 20% in Q2\",\n        summary: \"Nigeria has recorded a significant increase in oil production in the second quarter of the year, according to NNPC reports.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://www.thisdaylive.com/index.php/2023/07/15/nigerias-oil-production-increases\",\n        sourceName: \"ThisDay\",\n        category: \"business\",\n        publishedAt: new Date(Date.now() - 14400000).toISOString()\n    },\n    // Daily Trust mock news\n    {\n        id: \"21\",\n        title: \"Northern Governors Forum Addresses Security Challenges\",\n        summary: \"The Northern Governors Forum has met to address the security challenges facing the northern region of Nigeria.\",\n        imageUrl: \"/placeholder.svg?height=400&width=600\",\n        sourceUrl: \"https://dailytrust.com/northern-governors-forum-addresses-security-challenges\",\n        sourceName: \"Daily Trust\",\n        category: \"politics\",\n        publishedAt: new Date(Date.now() - 18000000).toISOString()\n    }\n];\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/news-scraper.ts\n"));

/***/ })

});